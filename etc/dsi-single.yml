stepback: false

pre:
    - command: shell.track

post:
    - command: shell.cleanup
    - command: shell.exec
      # destroy the cluster
      params:
        background: false
        working_dir: dsi
        script: |
          set -e 
          set -o verbose
          cd ./clusters/${cluster}
          # configure mongodb cluster with wiredTiger
          yes yes | ./terraform destroy
          echo "Cluster DESTROYED."
          echo "Test Results: "
          egrep "name|ops_per_sec" ../perf_all.json

functions:
  "prepare environment":
    - command: shell.exec
      params:
        script: |
          rm -rf ./*
          mkdir src
    - command: shell.exec
      # checkout dsi code
      params:
        working_dir: .
        script: |
          set -e 
          set -v
          git clone https://github.com/rzh/dsi
          cd dsi
          # install terraform
          mkdir keys
          mkdir terraform
          cd terraform
          wget -nv --no-check-certificate https://github.com/rzh/dsi/releases/download/t0.5.3/terraform_0.5.3.tar.gz -O - | tar zxv
          # install workload wrapper
          cd ../bin
          wget -nv --no-check-certificate https://github.com/rzh/mc/releases/download/r0.0.1/mc.tar.gz -O - | tar zxv
          cd ..
          ls
    - command: shell.exec
      # configure environment, has private information, no logging
      params:
        background: false
        working_dir: dsi
        silent: true
        script: |
          cd ./clusters/${cluster}
          # stage aws credential for terraform
          # ../../bin/make_terraform_env.sh ${terraform_key} ${terraform_secret} https://s3.amazonaws.com/mciupload/dsi/${build_variant}/${revision}/mongodb-${build_id}.tar.gz
          ../../bin/make_terraform_env.sh ${terraform_key} ${terraform_secret} https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.1.5.tgz
          # generate aws private key file
          echo "${ec2_pem}" > ../../keys/aws.pem
          chmod 400 ../../keys/aws.pem
  "bring up cluster":
    - command: shell.exec
      # bring up the cluster
      params:
        background: false
        working_dir: dsi
        silent: true
        script: |
          # to create a mongod EC2 cluster
          set -e 
          set -o verbose
          cd ./clusters/${cluster}
          cp ../../terraform/* .
          # create all resources and instances
          echo "mongodb url: https://s3.amazonaws.com/mciupload/dsi/${build_variant}/${revision}/mongodb-${build_id}.tar.gz"
          ./terraform apply 
          # this will extract all public and private IP address information
          ./env.sh
          echo "EC2 Cluster STARTED."
  "bring up 3 shard cluster":
    - command: shell.exec
      # bring up the cluster
      params:
        background: false
        working_dir: dsi
        silent: true
        script: |
          # to create a mongod EC2 cluster
          set -e 
          set -o verbose
          cd ./clusters/${cluster}
          cp ../../terraform/* .
          # create all resources and instances
          ./terraform apply -var="count=3" > t
          # workaround for failure to bring up all at the same time
          ./terraform apply -var="count=9" > t
          # this will extract all public and private IP address information
          ./env.sh
          echo "EC2 Cluster STARTED."
  "configure mongodb cluster":
    - command: shell.exec
      # bring up the mongod
      params:
        background: false
        working_dir: dsi
        script: |
          set -e 
          set -o verbose
          cd ./clusters/${cluster}
          # configure mongodb cluster with wiredTiger
          ../../bin/config-${setup}.sh mongodb ${storageEngine} ${numShard}
          echo "${cluster} MongoDB Replica Cluster STARTED."
          # configure run script
  "run test":
    - command: shell.exec
      params:
        working_dir: dsi
        script: |
          set -e
          set -v
          cd ./clusters/${cluster}
          cat ips.sh
          cat run-${test}.json
          ./update_run_config.sh
          cat run-${test}.json
          rm -f ../perf.json
          rm -rf ./reports
          rm -f ../../reports.tgz
          echo "Run test for ${test} with setup ${setup}"
          # run test
          ../../bin/mc -config run-${test}.json -run ${test}-run-${setup} -o perf.json 
          pwd
          ls -la
          ls -la ./reports
          mv perf.json ..
          cd ..
          cat perf.json >> perf_all.json
          echo "Done test for ${test} with setup ${setup}!"
    - command: "json.send"
      params:
         name: "perf"
         file: "dsi/clusters/perf.json"

  "destroy cluster":
    - command: shell.exec
      # destroy the cluster
      params:
        background: false
        working_dir: dsi
        script: |
          set -e 
          set -o verbose
          cd ./clusters/${cluster}
          # destroy the EC2 cluster
          yes yes | ./terraform destroy
          echo "Cluster DESTROYED."
          echo "All perf results"
          cd ..

  "make single cluster log artifact":
    - command: archive.targz_pack
      params:
        target: "reports.tgz"
        source_dir: "dsi/clusters/single"
        include:
          - "reports/**"

  "make shard cluster log artifact":
    - command: archive.targz_pack
      params:
        target: "reports.tgz"
        source_dir: "dsi/clusters/shard"
        include:
          - "reports/**"

  "upload log file":
    - command: s3.put
      params:
            aws_key: ${aws_key}
            aws_secret: ${aws_secret}
            local_file: reports.tgz
            remote_file: dsi/${build_variant}/${revision}/logs/${test}-${build_id}.${ext|tgz}
            bucket: mciuploads
            permissions: public-read
            content_type: ${content_type|application/x-gzip}
            display_name: ${test}-log

tasks:
- name: compile
  commands:
    - command: git.get_project
      params:
        directory: src
    - command: git.apply_patch
      params:
        directory: src
    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -o errexit
          set -o verbose
          ${scons|scons} ${compile_flags|} mongo mongod
          # strip binaries here
          strip mongo
          strip mongod
          mkdir -p mongodb/bin
          mv mongo mongodb/bin
          mv mongod mongodb/bin
          tar cvf mongodb.tar mongodb
          gzip mongodb.tar
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/mongodb.tar.gz
        remote_file: dsi/${build_variant}/${revision}/mongodb-${build_id}.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: mongodb.tar.gz

- name: single_cluster_test
  commands:
    - func: "prepare environment"
    - func: "bring up cluster"
    - func: "configure mongodb cluster"
    - func: "run test"
      vars:
        test: "ycsb"
    - func: "make single cluster log artifact"
    - func: "upload log file"
      vars:
        test: "ycsb"
    - func: "destroy cluster"

- name: shard_cluster_test
  commands:
    - func: "prepare environment"
    - func: "bring up 3 shard cluster"
    - func: "configure mongodb cluster"
    - func: "run test"
      vars:
        test: "ycsb"
    - func: "make shard cluster log artifact"
    - func: "upload log file"
      vars:
        test: "ycsb"
    - func: "destroy cluster"

buildvariants:
- name: linux-wt-repl-1
  display_name: Linux WT 1-Node ReplSet
  expansions:
    compile_flags: -j$(grep -c ^processor /proc/cpuinfo) CC=/opt/mongodbtoolchain/bin/gcc CXX=/opt/mongodbtoolchain/bin/g++ --release
    setup: single-replica
    cluster: single
    numShard: 0
    storageEngine: wiredTiger

  run_on:
    - "linux-64-amzn-perf-longevity"
  tasks:
    - name: single_cluster_test

- name: linux-wt-shard
  display_name: Linux WT Shard
  expansions:
    compile_flags: -j$(grep -c ^processor /proc/cpuinfo) CC=/opt/mongodbtoolchain/bin/gcc CXX=/opt/mongodbtoolchain/bin/g++ --release
    setup: shard
    cluster: shard
    numShard: 3
    storageEngine: wiredTiger

  run_on:
    - "linux-64-amzn-perf-longevity"
  tasks:
    - name: shard_cluster_test


































